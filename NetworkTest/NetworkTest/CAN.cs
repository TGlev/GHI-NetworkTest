using GHIElectronics.TinyCLR.Devices.Can;
using GHIElectronics.TinyCLR.Pins;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace NetworkTest
{
    public static class CAN
    {

        private static CanController Can1;
        private static CanController Can2;

        #region Heartbeat

        private static int HEARTBEATID = 0x16EF0000;

        private static byte ModuleFunctionCode;
        private static byte ModuleId;

        private static bool HeartbeatSettingsSet = false;
        private static byte MajorSoftwareVersion = 0;
        private static byte MinorSoftwareVersion = 0;
        private static byte[] IPAddress = new byte[4];
        private static bool SendOnCAN1 = true;

        private static CanMessage HeartbeatMessage;

        #endregion

        public static void Initialize(int Bitrate1 = 0, int Bitrate2 = 0, uint[] can1Filter = default(uint[]), uint[] can2Filter = default(uint[]))
        {
            if (Bitrate1 != 0)
            {
                Can1 = CanController.FromName(SC20100.CanBus.Can1);
                Can1.SetNominalBitTiming(GetBitrate(Bitrate1));

                if (can1Filter != null)
                    foreach (uint i in can1Filter)
                        Can1.Filter.AddMaskFilter(Filter.IdType.Extended, i, 0x1FFFFFFF);

                //Can1.Filter.AddRangeFilter(Filter.IdType.Extended, 0x18F00400, 0x18F00401);

                //Can1.Filter.AddMaskFilter(Filter.IdType.Extended, 0x18F00400, 0x1FFFFFFF);

                Can1.ErrorReceived += Can1_ErrorReceived;
                Can1.MessageReceived += Can1_MessageReceived;
                Can1.Enable();
            }

            if (Bitrate2 != 0)
            {
                Can2 = CanController.FromName(SC20100.CanBus.Can2);
                Can2.SetNominalBitTiming(GetBitrate(Bitrate2));

                if (can2Filter != null)
                    foreach (uint i in can2Filter)
                        Can2.Filter.AddMaskFilter(Filter.IdType.Extended, i, 0x1FFFFFFF);

                Can2.ErrorReceived += Can2_ErrorReceived;
                Can2.MessageReceived += Can2_MessageReceived;
                Can2.Enable();
            }

            IntPtr add = (IntPtr)(0x4000A054);
            var value = Marshal.ReadInt32(add);
            value |= (1 << 2);
            Marshal.WriteInt32(add, value);
        }

        public static void SendCAN1(CanMessage message)
        {
            if (Can1.CanWriteMessage)
                Can1.WriteMessage(message);
        }

        public static void SendCAN2(CanMessage message)
        {
            if (Can2.CanWriteMessage)
                Can2.WriteMessage(message);
        }

        public static void ReceiveCAN1(MessageReceivedEventHandler e)
        {
            Can1.MessageReceived += e;
        }
        public static void ReceiveCAN2(MessageReceivedEventHandler e)
        {
            Can2.MessageReceived += e;
        }

        private static void Can1_MessageReceived(CanController sender, MessageReceivedEventArgs e)
        {
        }

        private static void Can2_MessageReceived(CanController sender, MessageReceivedEventArgs e)
        {
        }

        private static void Can1_ErrorReceived(CanController sender, ErrorReceivedEventArgs e)
        {
            //Debug.WriteLine("CAN1 Error: " + ((object)e.Error).ToString());
            Can1.Disable();
            Can1.Enable();
        }

        private static void Can2_ErrorReceived(CanController sender, ErrorReceivedEventArgs e)
        {
            //Debug.WriteLine("CAN2 Error: " + ((object)e.Error).ToString());
            Can2.Disable();
            Can2.Enable();
        }

        public static void AddMaskFilterCAN1(uint id)
        {
            Can1.Filter.AddMaskFilter(Filter.IdType.Extended, id, 0x1FFFFFFF);
        }

        public static void AddMaskFilterCAN2(uint id)
        {
            Can2.Filter.AddMaskFilter(Filter.IdType.Extended, id, 0x1FFFFFFF);
        }

        public static void Reset()
        {
            if (Can1 != null)
            {
                Can1.Disable();
                Can1.Enable();
            }

            if (Can2 != null)
            {
                Can2.Disable();
                Can2.Enable();
            }
        }

        
        //Bit timing is generated by using the table found at https://docs.ghielectronics.com/software/tinyclr/tutorials/can.html
        private static CanBitTiming GetBitrate(int Bitrate)
        {
            switch (Bitrate)
            {
                case 33_333:
                    return new CanBitTiming(13, 2, 90, 1, false);
                case 125_000:
                    return new CanBitTiming(13, 2, 24, 1, false);
                case 250_000:
                    return new CanBitTiming(13, 2, 12, 1, false);
                case 500_000:
                    return new CanBitTiming(13, 2, 6, 1, false);
                case 1000_000:
                    return new CanBitTiming(13, 2, 3, 1, false);
                //Default is 250K, according to J1939
                default:
                    return new CanBitTiming(13, 2, 12, 1, false);

            }
        }

        private static CanMessage Message;
        public static CanMessage BuildMesssage(int arbitrationid)
        {
            Message = new CanMessage();

            //Message length
            Message.Length = 8;

            //Arbitration ID
            Message.ExtendedId = true;
            Message.ArbitrationId = arbitrationid;

            return Message;
        }

    }


}
